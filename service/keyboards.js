// service/keyboard.js

import { InlineKeyboard } from 'puregram';
import axios from 'axios';
import * as log from './logging.js'
import { getAccessToken } from './apiService.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
export const isUserActive = async (userId) => {
    try {
        const token = getAccessToken();

        if (!token) {
            const err = 'No access token available';
            log.setAccessTokenError(err);
            return false;
        }

        const response = await axios.get(`https://sub.yuha.pl/api/user/${userId}`, {
            headers: { 'Authorization': `Bearer ${token}` },
        });

        const { status } = response.data;

        if (status === 'active') {
            log.isUserActive(userId, true);
            return true;
        } else {
            log.isUserActive(userId, false);
            return false;
        }
    } catch (error) {
        const statusCode = error.response ? error.response.status : 'No Response';
        log.isUserActiveError(error.message, userId);
        return false;
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Å–ª–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "Configs"
export const start = async (userId) => {
    const keymarkup = [];

    if (await isUserActive(userId)) {
        keymarkup.push([
            InlineKeyboard.textButton({
                text: 'üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                payload: 'configList'
            })
        ]);
    }

    keymarkup.push([
        InlineKeyboard.textButton({
            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            payload: 'settings'
        })
    ]);

    return InlineKeyboard.keyboard(keymarkup);
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
export const settings = InlineKeyboard.keyboard([
    [
        InlineKeyboard.textButton({
            text: '–¢–µ–º–∞',
            payload: 'changeTheme'
        }),
        InlineKeyboard.textButton({
            text: '–Ø–∑—ã–∫',
            payload: 'changeLanguage'
        })
    ],
    [
        InlineKeyboard.textButton({
            text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            payload: 'backToStart'
        })
    ]
]);

export const backToStart = InlineKeyboard.keyboard([
    [
        InlineKeyboard.textButton({
            text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            payload: 'settings'
        })
    ]
]);

export const config = InlineKeyboard.keyboard([
    [
        InlineKeyboard.textButton({
            text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            payload: 'backToConfiList'
        })
    ]
]);


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
export const generateConfigList = () => {
    const keyboard = [
        [
            InlineKeyboard.textButton({
                text: '‚≠êÔ∏è –ê–≤—Ç–æ',
                payload: 'config_auto'
            })
        ],
        [
            InlineKeyboard.textButton({
                text: 'üõ† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ',
                payload: 'advanced_configs'
            })
        ],
        [
            InlineKeyboard.textButton({
                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                payload: 'backToStart'
            })
        ]
    ];

    return InlineKeyboard.keyboard(keyboard);
};

export const generateAdvancedConfigList = (userConfigs) => {
    const keyboard = [];

    if (userConfigs.inbounds.vless) {
        userConfigs.inbounds.vless.forEach((inbound, index) => {
            keyboard.push([
                InlineKeyboard.textButton({
                    text: `${inbound}`,
                    payload: `config_vless_${index}`,
                })
            ]);
        });
    }
  
    if (userConfigs.inbounds.vmess) {
        userConfigs.inbounds.vmess.forEach((inbound, index) => {
            keyboard.push([
                InlineKeyboard.textButton({
                    text: `${inbound}`,
                    payload: `config_vmess_${index}`,
                })
            ]);
        });
    }

    if (userConfigs.inbounds.trojan) {
        userConfigs.inbounds.trojan.forEach((inbound, index) => {
            keyboard.push([
                InlineKeyboard.textButton({
                    text: `${inbound}`,
                    payload: `config_trojan_${index}`,
                })
            ]);
        });
    }

    keyboard.push([
        InlineKeyboard.textButton({
            text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            payload: 'backToConfiList'
        })
    ]);

    return InlineKeyboard.keyboard(keyboard);
};