// main.js (–Ω–µ —É–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫—É)

import { Telegram, MediaSource } from 'puregram';
import dotenv from 'dotenv';
import axios from 'axios';
import QRCode from 'qrcode';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import * as log from './service/logging.js';
import {
    findOrCreateUser,
    incrementMessageCount,
    incrementInlineInteractionCount,
    toggleUserTheme,
    toggleUserLanguage
} from './service/userService.js';
import mongoose from 'mongoose';
import * as keyboard from './service/keyboards.js';
import { initializeAccessToken, getAccessToken } from './service/apiService.js';

dotenv.config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose.connect(process.env.MONGO_URI)
    .then(() => log.databaseConnect())
    .catch(err => log.databaseConnectError(err));

const telegram = Telegram.fromToken(process.env.API_TOKEN);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
telegram.updates.on('message', async (context) => {
    log.Action(context);
    await incrementMessageCount(context.senderId);

    if (context.text === '/start') {
        const userData = {
            user_id: context.senderId,
        };
        await findOrCreateUser(userData);
        await sendStartMessage(context);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const generateStartMessage = (userId, userData) => {

    const isActive = userData?.status === 'active';
    const expireDate = userData?.expire
        ? `–¥–æ ${new Date(userData.expire * 1000).toLocaleDateString('ru-RU')}`
        : '‚àû';

    const trafficInfo = isActive ? (
        userData.data_limit === null
            ? `–¢—Ä–∞—Ñ–∏–∫: ‚àû –ì–ë`
            : `–¢—Ä–∞—Ñ–∏–∫: ${((userData.data_limit - userData.used_traffic) / (1024 ** 3)).toFixed(1)}/${(userData.data_limit / (1024 ** 3)).toFixed(0)} –ì–ë`
    ) : '';

    const status = isActive ? `–°—Ç–∞—Ç—É—Å: ${expireDate}` : '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω';

    return `#Ô∏è‚É£ ID: ${userId}\nüìÖ ${status}\nüì∂ ${trafficInfo}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendStartMessage = async (context) => {
    try {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB
        const user = await findOrCreateUser({ user_id: context.senderId });
        if (!user) {
            throw new Error('User not found in local database.');
        }

        const userTheme = user.theme || 'light';
        const imagePath = `./themes/${userTheme}/start.png`;

        const userData = await getUserData(context.senderId);
        const message = generateStartMessage(context.senderId, userData);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await context.sendPhoto(
            MediaSource.path(imagePath),
            {
                caption: message,
                reply_markup: await keyboard.start(context.senderId),
                parse_mode: 'markdown'
            }
        );
    } catch (error) {
        console.error('Error sending start message:', error);
        await context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à–∞
function generateHash(data) {
    return crypto.createHash('sha256').update(data).digest('hex');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const cacheQrDir = './cache/qr';
if (!fs.existsSync(cacheQrDir)) {
    fs.mkdirSync(cacheQrDir, { recursive: true });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
telegram.updates.on('callback_query', async (context) => {
    log.Action(context);

    await incrementInlineInteractionCount(context.senderId);

    const action = context.data;
    switch (action) {
        case 'settings':
            try {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB
                const user = await findOrCreateUser({ user_id: context.senderId });
                if (!user) {
                    throw new Error('User not found in local database.');
                }
        
                const userTheme = user.theme || 'light';
                const imagePath = `./themes/${userTheme}/settings.png`;
        
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞
                if (context.message.photo || context.message.document) {
                    await context.message.editMessageMedia({
                        type: 'photo',
                        media: MediaSource.path(imagePath),
                        caption: '',
                        parse_mode: 'markdown'
                    }, {
                        reply_markup: keyboard.settings
                    });
                } else {
                    await context.message.editText('Settings opened', {
                        reply_markup: keyboard.settings,
                        parse_mode: 'markdown'
                    });
                }
        
                await context.answerCallbackQuery();
            } catch (error) {
                console.error('Error while opening settings:', error);
        
                await context.answerCallbackQuery({
                    text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
                    show_alert: false
                });
            }
            break;

        case 'changeTheme':
            try {
                const newTheme = await toggleUserTheme(context.senderId);
                const imagePath = `./themes/${newTheme}/settings.png`;

                if (context.message.photo || context.message.document) {
                    await context.message.editMessageMedia({
                        type: 'photo',
                        media: MediaSource.path(imagePath),
                        caption: '',
                        parse_mode: 'markdown'
                    }, {
                        reply_markup: keyboard.settings
                    });
                } else {
                    await context.message.editText('Settings updated', {
                        reply_markup: keyboard.settings,
                        parse_mode: 'markdown'
                    });
                }

                await context.answerCallbackQuery({
                    text: `–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: ${newTheme}`,
                    show_alert: false
                });
            } catch (err) {
                console.error('Error while switching theme:', err);
                await context.answerCallbackQuery({
                    text: 'Error while switching theme',
                    show_alert: false
                });
            }
            break;

        case 'changeLanguage':
            try {
                const newLanguage = await toggleUserLanguage(context.senderId);
                await context.answerCallbackQuery({
                    text: `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω ${newLanguage}`,
                    show_alert: false
                });
            } catch (err) {
                console.error('Error while switching language', err);
                await context.answerCallbackQuery({
                    text: 'Error while switching language',
                    show_alert: false
                });
            }
            break

        case 'backToStart':
            try {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã MongoDB
                const user = await findOrCreateUser({ user_id: context.senderId });
        
                if (!user) {
                    throw new Error('User not found in local database.');
                }
        
                const userTheme = user.theme || 'light';
                const imagePath = `./themes/${userTheme}/start.png`;
        
                const message = generateStartMessage(context.senderId, await getUserData(context.senderId));
        
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç
                if (context.message.photo || context.message.document) {
                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ editMessageMedia
                    await context.message.editMessageMedia({
                        type: 'photo',
                        media: MediaSource.path(imagePath),
                        caption: message,
                        parse_mode: 'markdown'
                    }, {
                        reply_markup: await keyboard.start(context.senderId)
                    });
                } else {
                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    await context.message.editText(message, {
                        reply_markup: await keyboard.start(context.senderId),
                        parse_mode: 'markdown'
                    });
                }
        
                await context.answerCallbackQuery();
            } catch (err) {
                console.error('Error while returning to start screen:', err);
        
                await context.answerCallbackQuery({
                    text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                    show_alert: false
                });
            }
            break;

        case 'configList': {
            try {
                const user = await findOrCreateUser({ user_id: context.senderId });
                if (!user) {
                    throw new Error('User not found in local database.');
                }
        
                const userTheme = user.theme || 'light';
                const imagePath = `./themes/${userTheme}/configList.png`;
                const userData = await getUserData(context.senderId);
        
                if (context.message.photo || context.message.document) {
                    await context.message.editMessageMedia({
                        type: 'photo',
                        media: MediaSource.path(imagePath),
                        caption: '',
                        parse_mode: 'markdown'
                    }, {
                        reply_markup: keyboard.generateConfigList(userData)
                    });
                } else {
                    await context.message.editText('', {
                        reply_markup: keyboard.generateConfigList(userData),
                        parse_mode: 'markdown'
                    });
                }
        
                await context.answerCallbackQuery();
            } catch (error) {
                console.error('Error while displaying config list:', error);
        
                await context.answerCallbackQuery({
                    text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤.',
                    show_alert: false
                });
            } break;
        }
              
        case 'config_auto': {
            const userData = await getUserData(context.senderId);
            if (!userData || !userData.subscription_url) {
                await context.answerCallbackQuery({
                    text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å subscription_url',
                    show_alert: false
                });
                return;
            }
        
            const configLink = userData.subscription_url;
            const configHash = generateHash(configLink);
            const qrCodePath = path.join(cacheQrDir, `${configHash}.png`);
        
            if (fs.existsSync(qrCodePath)) {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ QR-–∫–æ–¥–∞
                if (context.message.photo || context.message.document) {
                    await context.message.editMessageMedia({
                        type: 'photo',
                        media: MediaSource.path(qrCodePath),
                        caption: `\`\`\`${configLink}\`\`\``,
                        parse_mode: 'markdown'
                    }, {
                        reply_markup: keyboard.config
                    });
                } else if (context.message.text) {
                    await context.message.editText(`\`\`\`${configLink}\`\`\``, {
                        reply_markup: keyboard.config,
                        parse_mode: 'markdown'
                    });
                } else {
                    await context.sendPhoto(
                        MediaSource.path(qrCodePath),
                        {
                            caption: `\`\`\`${configLink}\`\`\``,
                            reply_markup: keyboard.config,
                            parse_mode: 'markdown'
                        }
                    );
                }
            } else {
                try {
                    // –û–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è QR-–∫–æ–¥–∞
                    const qrOptions = {
                        color: {
                            dark: '#474747',
                            light: '#E8E8E8'
                        },
                        width: 720
                    };

                    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞ —Å –æ–ø—Ü–∏—è–º–∏
                    await QRCode.toFile(qrCodePath, configLink, qrOptions);

                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞
                    if (context.message.photo || context.message.document) {
                        await context.message.editMessageMedia({
                            type: 'photo',
                            media: MediaSource.path(qrCodePath),
                            caption: `\`\`\`${configLink}\`\`\``,
                            parse_mode: 'markdown'
                        }, {
                            reply_markup: keyboard.config
                        });
                    } else if (context.message.text) {
                        await context.message.editText(`\`${configLink}\``, {
                            reply_markup: keyboard.config,
                            parse_mode: 'markdown'
                        });
                    } else {
                        await context.sendPhoto(
                            MediaSource.path(qrCodePath),
                            {
                                caption: `\`\`\`${configLink}\`\`\``,
                                reply_markup: keyboard.config,
                                parse_mode: 'markdown'
                            }
                        );
                    }
                } catch (err) {
                    console.error('Error displaying config:', err);
                    await context.answerCallbackQuery({
                        text: 'Error displaying config',
                        show_alert: false
                    });
                }
            } break;
        }

        case 'backToConfiList': {
            const userData = await getUserData(context.senderId);
    
            if (!userData) {
                await context.answerCallbackQuery({
                    text: 'Error retrieving configs',
                    show_alert: false
                });
                return;
            }

            if (context.message.text) {
                await context.message.editText('Choose a config:', {
                    reply_markup: keyboard.generateConfigList(userData),
                    parse_mode: 'markdown'
                });
            } else if (context.message.photo || context.message.document) {
                await context.message.editMessageMedia({
                    type: 'photo',
                    media: MediaSource.path('./themes/light/configList.png'),
                    caption: 'Choose a config:',
                    parse_mode: 'markdown'
                }, {
                    reply_markup: keyboard.generateConfigList(userData)
                });
            } else {
                await context.send('Choose a config:', {
                    reply_markup: keyboard.generateConfigList(userData),
                    parse_mode: 'markdown'
                });
            }
        
            await context.answerCallbackQuery();
            break;
        }

        case 'advanced_configs': {
            try {
                const userData = await getUserData(context.senderId);
                
                if (!userData) {
                    await context.answerCallbackQuery({
                        text: 'Error retrieving configs',
                        show_alert: false
                    });
                    return;
                }

                if (context.message.photo || context.message.document) {
                    await context.message.editMessageMedia({
                        type: 'photo',
                        media: MediaSource.path('./themes/light/configList.png'),
                        caption: 'Choose a config:',
                        parse_mode: 'markdown'
                    }, {
                        reply_markup: keyboard.generateAdvancedConfigList(userData)
                    });
                } else {
                    await context.message.editText('Choose a config:', {
                        reply_markup: keyboard.generateAdvancedConfigList(userData),
                        parse_mode: 'markdown'
                    });
                }

                await context.answerCallbackQuery();
            } catch (error) {
                console.error('Error while displaying advanced config list:', error);
                await context.answerCallbackQuery({
                    text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.',
                    show_alert: false
                });
            }
            break;
        }

        default:
            if (action.startsWith('config_')) {
                const userData = await getUserData(context.senderId);

                if (!userData) {
                    await context.answerCallbackQuery({
                        text: 'Error retrieving config',
                        show_alert: false
                    });
                
                    return;
                }

                // –ü–∞—Ä—Å–∏–Ω–≥ action –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞
                const [, protocol, index] = action.split('_'); // –ü—Ä–∏–º–µ—Ä: config_vless_0 -> [config, vless, 0]
                const configIndex = parseInt(index, 10);

                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –∏ –∏–Ω–¥–µ–∫—Å—É
                const configLinks = userData.links.filter(link => link.toLowerCase().includes(protocol));
                const configLink = configLinks[configIndex]; // –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É

                if (!configLink) {
                    await context.answerCallbackQuery({
                        text: 'Config not found',
                        show_alert: false
                    });
                    
                    return;
                }

                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                const configHash = generateHash(configLink);
                const qrCodePath = path.join(cacheQrDir, `${configHash}.png`);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ QR-–∫–æ–¥
                if (fs.existsSync(qrCodePath)) {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ QR-–∫–æ–¥–∞
                    if (context.message.photo || context.message.document) {
                        await context.message.editMessageMedia({
                            type: 'photo',
                            media: MediaSource.path(qrCodePath),
                            caption: `\`\`\`${configLink}\`\`\``,
                            parse_mode: 'markdown'
                        }, {
                            reply_markup: keyboard.config
                        });
                    } else if (context.message.text) {
                        await context.message.editText(`\`${configLink}\``, {
                            reply_markup: keyboard.config,
                            parse_mode: 'markdown'
                        });
                    } else {
                        await context.sendPhoto(
                            MediaSource.path(qrCodePath),
                            {
                                caption: `\`\`\`${configLink}\`\`\``,
                                reply_markup: keyboard.config,
                                parse_mode: 'markdown'
                            }
                        );
                    }
                } else {
                    try {
                        // –û–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è QR-–∫–æ–¥–∞
                        const qrOptions = {
                            color: {
                                dark: '#474747',
                                light: '#E8E8E8'
                            },
                            width: 720
                        };

                        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞ —Å –æ–ø—Ü–∏—è–º–∏
                        await QRCode.toFile(qrCodePath, configLink, qrOptions);

                        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞
                        if (context.message.photo || context.message.document) {
                            await context.message.editMessageMedia({
                                type: 'photo',
                                media: MediaSource.path(qrCodePath),
                                caption: `\`\`\`${configLink}\`\`\``,
                                parse_mode: 'markdown'
                            }, {
                                reply_markup: keyboard.config
                            });
                        } else if (context.message.text) {
                            await context.message.editText(`\`${configLink}\``, {
                                reply_markup: keyboard.config,
                                parse_mode: 'markdown'
                            });
                        } else {
                            await context.sendPhoto(
                                MediaSource.path(qrCodePath),
                                {
                                    caption: `\`\`\`${configLink}\`\`\``,
                                    reply_markup: keyboard.config,
                                    parse_mode: 'markdown'
                                }
                            );
                        }
                    } catch (err) {
                        console.error('Error displaying config:', err);
                        await context.answerCallbackQuery({
                            text: 'Error displaying config',
                            show_alert: false
                        });
                    }
                }

                await context.answerCallbackQuery();
                break;
            }
    }
});

const getUserData = async (userId) => {
    try {
        const token = getAccessToken();
        if (!token) throw new Error('No access token available');

        const response = await axios.get(`${process.env.API_LINK}/api/user/${userId}`, {
            headers: { 'Authorization': `Bearer ${token}` },
        });

        return response.data;
    } catch (error) {
        log.isUserActiveError(error.message, userId);
        return null;
    }
};

(async () => {
    try {
        const botInfo = await telegram.api.getMe();
        const botUsername = botInfo.username;

        await telegram.updates.startPolling();
        log.startPolling(botUsername);
        const token = initializeAccessToken ();
    } catch (err) {
        log.setAccessTokenError(err);
    }
})();